{"version":3,"file":"index.umd.js","sources":["../src/core/context.ts","../src/core/useCacheable.ts","../src/core/Provider.tsx","../src/utils/cacheKeyObfuscator.ts","../src/utils/fetcher.ts","../src/utils/useEffectOnce.ts"],"sourcesContent":["import * as React from 'react';\n\ninterface ICachedData {\n  data?: string\n  cacheStoredAt?: string\n  cacheExpiredAt?: string\n}\n\nexport interface ICoreContextStore {\n  [cacheDataKey: string]: ICachedData\n}\n\ninterface ICoreContextAttrs {\n  store: ICoreContextStore\n}\n\ninterface ICoreContextMethods {\n  getCachedData?(cacheKey: string): string\n  setCacheData?(cacheKey: string, data: any): void\n}\n\ntype CoreContext = ICoreContextAttrs & ICoreContextMethods\n\nexport default React.createContext<CoreContext>({ store: null });\n","import * as React from 'react';\nimport { useEffectOnce, cacheKeyObfuscator, fetcher } from '../utils';\n\nimport libContext from './context';\n\nconst WARN_LEADING = '[RESTICACHE WARNING]';\nconst WARN_INVALID_OPTION_PROPERTY = (property: string) => `Option [${property}] is not part of the API. While this is not an error, ensure the options matches the API.`;\n\ninterface IDataState<T> {\n  isLoading: boolean\n  error?: Error\n  data?: T\n}\nconst initialDataState: IDataState<any> = {\n  isLoading: false,\n  error: null,\n  data: null,\n};\n\ntype CachePolicy = 'cache-first' | 'network-only' | 'cache-only'\n\ninterface ICachePolicies {\n  CACHE_FIRST: CachePolicy\n  NETWORK_ONLY: CachePolicy\n  CACHE_ONLY: CachePolicy\n}\n\nconst CACHE_POLICIES: ICachePolicies = {\n  CACHE_FIRST: 'cache-first',\n  NETWORK_ONLY: 'network-only',\n  CACHE_ONLY: 'cache-only',\n};\n\ntype HookOptionVal = string | boolean | null\n\ninterface IHookOptions {\n  key?: string\n  cachePolicy: CachePolicy\n  [optKey: string]: HookOptionVal\n}\n\nconst DEFAULT_OPTS: IHookOptions = {\n  key: null,\n  cachePolicy: CACHE_POLICIES.CACHE_FIRST,\n\n};\n\ninterface IOptsParam {\n  [optKey: string]: HookOptionVal\n}\n\nconst mergeOptsDefault = (optsParam: IOptsParam) => {\n  const opts = { ...DEFAULT_OPTS };\n\n  Object.keys(optsParam).forEach((property) => {\n    if (Object.prototype.hasOwnProperty.call(DEFAULT_OPTS, property)) {\n      opts[property] = optsParam[property];\n    } else {\n      // eslint-disable-next-line no-console\n      console.warn(WARN_LEADING, WARN_INVALID_OPTION_PROPERTY(property));\n    }\n  });\n\n  return opts;\n};\n\nfunction useCacheable(serviceUrl: string, argOpts = DEFAULT_OPTS) {\n  const options = mergeOptsDefault(argOpts);\n  const ctx = React.useContext(libContext);\n  const serviceCacheKey = options.key;\n\n  // Determine the cache key based on user-defined key and fallback to encoded service URL\n  // User-defined cache key disregards url into its key, so changing urls will override the data\n  const cacheKey = serviceCacheKey || cacheKeyObfuscator.encode(serviceUrl);\n  const cachedData = ctx.getCachedData(cacheKey);\n\n  // Logic flags based on Cache Policies\n  const isCacheAvailable = Boolean(cachedData);\n  const isCacheAllowed = options.cachePolicy !== CACHE_POLICIES.NETWORK_ONLY;\n  const isNetworkAllowed = [\n    CACHE_POLICIES.CACHE_FIRST,\n    CACHE_POLICIES.NETWORK_ONLY,\n  ].includes(options.cachePolicy);\n  const shouldUseCache = isCacheAvailable && isCacheAllowed;\n\n  // Prepare data for initial hook load\n  const cacheDataForBootstrap = { ...initialDataState, data: cachedData };\n  const bootstrappedData = shouldUseCache ? cacheDataForBootstrap : initialDataState;\n  const [dataState, setDataState] = React.useState(bootstrappedData);\n\n  /**\n   * Perform Fetch Side Effect from Service Url\n   * Will store the data to cache if cache is allowed\n   */\n  const performFetch = React.useCallback(async () => {\n    if (isCacheAvailable || !isNetworkAllowed) {\n      return;\n    }\n\n    // start the fetcher processes\n    setDataState({ ...dataState, isLoading: true });\n    const data = await fetcher.get(serviceUrl);\n    setDataState({ ...dataState, data });\n\n    // set fetched data to cache\n    if (isCacheAllowed) {\n      ctx.setCacheData(cacheKey, data);\n    }\n  }, [isCacheAvailable, isNetworkAllowed, dataState, serviceUrl, isCacheAllowed, ctx, cacheKey]);\n\n  useEffectOnce(() => {\n    performFetch();\n  });\n\n  return dataState;\n}\n\nexport default useCacheable;\n","import * as React from 'react';\n\nimport libContext, { ICoreContextStore } from './context';\n\nconst ERR_LEADING = '[RESTICACHE ERROR]';\n\ninterface IProps {\n  children: React.ReactElement\n}\nfunction ResticacheProvider({ children }: IProps) {\n  const [cacheStore, setCacheStore] = React.useState<ICoreContextStore>({});\n\n  /**\n   * set data to cache based on provided cache key or encoded url\n   */\n  function setCacheData(cacheKey: string, data: any) {\n    // serialize data into JSON string to let the data be stored in browser storage or cookies\n    const serializedData = JSON.stringify(data);\n\n    // TODO: store serialized data to cookie or local storage\n    setCacheStore({\n      ...cacheStore,\n      [cacheKey]: {\n        data: serializedData,\n        // TODO: implement cache expiration logic\n        cacheStoredAt: null,\n        cacheExpiredAt: null,\n      },\n    });\n  }\n\n  /**\n   * get data based on provided cache key or encoded url\n   */\n  function getCachedData(cacheKey: string) {\n    if (!cacheStore[cacheKey]) {\n      return null;\n    }\n\n    try {\n      const deserializedData = JSON.parse(cacheStore[cacheKey]?.data);\n      return deserializedData;\n    } catch (e) {\n      // eslint-disable-next-line no-console\n      console.log(ERR_LEADING, e);\n      return null;\n    }\n  }\n\n  const ctxValue = {\n    store: cacheStore,\n    getCachedData,\n    setCacheData,\n  };\n\n  return (\n    <libContext.Provider value={ctxValue}>\n      {children}\n    </libContext.Provider>\n  );\n}\n\nexport default ResticacheProvider;\n","const obsfuscator = {\n  encode: (str: string) => btoa(str),\n  decode: (str: string) => atob(str),\n};\n\nexport default obsfuscator;\n","/**\n * Fetcher Engine. Can and should be replaced by any other fetcher\n * Should support POST method and HTTP Call Aborting as well!\n * @param  {string} url\n */\nasync function get(url: string) {\n  const response = await window.fetch(url);\n  const data = await response.json();\n  return data;\n}\n\nasync function post(url: string, bodyParams: any) {\n  const response = await window.fetch(url, {\n    method: 'POST',\n    body: JSON.stringify(bodyParams),\n  });\n  const data = await response.json();\n  return data;\n}\n\nconst fetcher = {\n  get,\n  post,\n};\n\nexport default fetcher;\n","import * as React from 'react';\n\ntype UseEffectHandler = (...args: any[]) => void\n\nfunction useEffectOnce(fn: UseEffectHandler) {\n  React.useEffect(fn, []);\n}\n\nexport default useEffectOnce;\n"],"names":["React","store","initialDataState","isLoading","error","data","CACHE_POLICIES","CACHE_FIRST","NETWORK_ONLY","CACHE_ONLY","DEFAULT_OPTS","key","cachePolicy","children","cacheStore","setCacheStore","libContext","Provider","value","getCachedData","cacheKey","JSON","parse","_cacheStore$cacheKey","e","console","log","setCacheData","serializedData","stringify","cacheStoredAt","cacheExpiredAt","serviceUrl","argOpts","optsParam","opts","options","Object","keys","forEach","property","prototype","hasOwnProperty","call","warn","WARN_INVALID_OPTION_PROPERTY","ctx","btoa","cachedData","isCacheAvailable","Boolean","isCacheAllowed","isNetworkAllowed","includes","shouldUseCache","cacheDataForBootstrap","dataState","setDataState","performFetch","url","window","fetch","response","json","fetcher"],"mappings":"obAuBeA,gBAAiC,CAAEC,MAAO,OCVnDC,EAAoC,CACxCC,WAAW,EACXC,MAAO,KACPC,KAAM,MAWFC,EAAiC,CACrCC,YAAa,cACbC,aAAc,eACdC,WAAY,cAWRC,EAA6B,CACjCC,IAAK,KACLC,YAAaN,EAAeC,iCClC9B,gBAA8BM,IAAAA,WACQb,WAAkC,IAA/Dc,OAAYC,OA6CnB,OACEf,gBAACgB,EAAWC,UAASC,MAPN,CACfjB,MAAOa,EACPK,cAjBF,SAAuBC,GACrB,IAAKN,EAAWM,GACd,YAGF,UAEE,OADyBC,KAAKC,eAAMR,EAAWM,WAAXG,EAAsBlB,MAE1D,MAAOmB,GAGP,OADAC,QAAQC,IAxCM,qBAwCWF,UAQ3BG,aArCF,SAAsBP,EAAkBf,SAEhCuB,EAAiBP,KAAKQ,UAAUxB,GAGtCU,OACKD,UACFM,GAAW,CACVf,KAAMuB,EAENE,cAAe,KACfC,eAAgB,cA+BjBlB,mBDSP,SAAsBmB,EAAoBC,YAAAA,IAAAA,EAAUvB,GAClD,IAhBwBwB,EAClBC,EAeAC,GAhBkBF,EAgBSD,EAf3BE,OAAYzB,GAElB2B,OAAOC,KAAKJ,GAAWK,QAAQ,SAACC,GAC1BH,OAAOI,UAAUC,eAAeC,KAAKjC,EAAc8B,GACrDL,EAAKK,GAAYN,EAAUM,GAG3Bf,QAAQmB,KAtDO,uBACgB,SAACJ,oBAAgCA,8FAqDrCK,CAA6BL,MAIrDL,GAKDW,EAAM9C,aAAiBgB,GAKvBI,EAJkBgB,EAAQzB,KEpEPoC,KFwEqCf,GACxDgB,EAAaF,EAAI3B,cAAcC,GAG/B6B,EAAmBC,QAAQF,GAC3BG,EAAiBf,EAAQxB,cAAgBN,EAAeE,aACxD4C,EAAmB,CACvB9C,EAAeC,YACfD,EAAeE,cACf6C,SAASjB,EAAQxB,aACb0C,EAAiBL,GAAoBE,EAGrCI,OAA6BrD,GAAkBG,KAAM2C,MAEzBhD,WADTsD,EAAiBC,EAAwBrD,GAC3DsD,OAAWC,OAMZC,EAAe1D,6BACnB,OAAIiD,IAAqBG,qBAKzBK,OAAkBD,GAAWrD,WAAW,8BG/FzBwD,8BACMC,OAAOC,MAAMF,kBAA9BG,0BACaA,EAASC,6CH8FPC,CAAYhC,kBAAzB3B,GACNoD,OAAkBD,GAAWnD,KAAAA,KAGzB8C,GACFL,EAAInB,aAAaP,EAAUf,MAZV,oCAclB,CAAC4C,EAAkBG,EAAkBI,EAAWxB,EAAYmB,EAAgBL,EAAK1B,IAMpF,OI7GApB,YJyGc,WACZ0D,KI1GkB,IJ6GbF"}