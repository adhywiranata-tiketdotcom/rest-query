{"version":3,"file":"index.module.js","sources":["../src/core/rootContext.ts","../src/utils/fetcher.ts","../src/utils/useEffectOnce.ts","../src/utils/consoleLogger.ts","../src/utils/cachePersistor.ts","../src/core/RestQueryProvider.tsx","../src/core/useCacheable.ts","../src/utils/cacheKeyObfuscator.ts","../src/core/useFetchable.ts","../src/core/useStreamable.ts"],"sourcesContent":["import * as React from 'react';\n\nimport { StoreHashMap } from '../interfaces';\n\ninterface CoreContextAttributes {\n  store: StoreHashMap\n}\n\ninterface CoreContextMethods {\n  getCachedData?(cacheKey: string): string\n  setCacheData?(cacheKey: string, data: any, opts: any): void\n}\n\nexport type CoreContext = CoreContextAttributes & CoreContextMethods\n\nexport default React.createContext<CoreContext>({ store: null });\n","/*\nFetcher Engine which contains tipical RESTful HTTP Method operations.\nOnly supports client-side fetching and might change its implementation\ndepending on the implementation of Abort request and upcoming SSR strategy.\n*/\n\n// Fetcher HTTP object signature\ninterface Fetcher {\n  get: (url: string) => Promise<any>\n  post: (url: string, bodyParams: any) => Promise<any>\n  put: (url: string, bodyParams: any) => Promise<any>\n  performDelete: (url: string) => Promise<any>\n  patch: (url: string, bodyParams: any) => Promise<any>\n}\n\n/**\n * Fetch GET request\n * @param url service url to fetch from\n */\nasync function get(url: string):Promise<any> {\n  const response = await window.fetch(url);\n  const data = await response.json();\n  return data;\n}\n\n/**\n * Fetch POST request\n * @param url service url to fetch from\n * @param bodyParams body to set to POST request\n */\nasync function post(url: string, bodyParams: any):Promise<any> {\n  const response = await window.fetch(url, {\n    method: 'POST',\n    body: JSON.stringify(bodyParams),\n  });\n  const data = await response.json();\n  return data;\n}\n\n/**\n * Fetch PUT request\n * @param url service url to fetch from\n * @param bodyParams body to set to PUT request\n */\nasync function put(url: string, bodyParams: any):Promise<any> {\n  const response = await window.fetch(url, {\n    method: 'PUT',\n    body: JSON.stringify(bodyParams),\n  });\n  const data = await response.json();\n  return data;\n}\n\n/**\n * Fetch DELETE request\n * @param url service url to fetch from\n */\nasync function performDelete(url: string):Promise<any> {\n  const response = await window.fetch(url, {\n    method: 'DELETE',\n  });\n  const data = await response.json();\n  return data;\n}\n\n/**\n * Fetch PATCH request\n * @param url service url to fetch from\n * @param bodyParams body to set to PATCH request\n */\nasync function patch(url: string, bodyParams: any):Promise<any> {\n  const response = await window.fetch(url, {\n    method: 'PATCH',\n    body: JSON.stringify(bodyParams),\n  });\n  const data = await response.json();\n  return data;\n}\n\nconst fetcher: Fetcher = {\n  get,\n  post,\n  put,\n  performDelete,\n  patch,\n};\n\nexport default fetcher;\n","import * as React from 'react';\n\ntype UseEffectHandler = (...args: any[]) => void\n\n/**\n * React useEffect which runs only once per component lifecycle\n * @param fn effect function to run once\n */\nfunction useEffectOnce(fn: UseEffectHandler) {\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  React.useEffect(fn, []);\n}\n\nexport default useEffectOnce;\n","/* eslint-disable no-console */\n\nconst WARN_LEADING = '[TIX REST QUERY WARNING]';\nconst ERR_LEADING = '[TIX REST QUERY ERROR]';\n\nexport default {\n  warn: (...message: string[]) => {\n    console.warn(WARN_LEADING, ...message);\n  },\n  err: (...message: string[]) => {\n    console.error(ERR_LEADING, ...message);\n  },\n};\n","import { CachedData, StoreHashMap } from '../interfaces';\n\nconst CACHE_PERSISTOR_KEY_PREFIX = 'tix_rest_query_persisted_cache';\nconst INITIAL_CACHE_VAL = '{}';\nconst storageEngine = window.localStorage;\n\n/**\n * CachePersistor works as a single source of truth - engine on cache persistence\n * This pattern avoids any direct access to any other means of browser storage,\n * hence, close for modification outside this particular class.\n */\nabstract class CachePersistor {\n  /**\n   * Mutate the store based on changes on a single key\n   */\n  static save(cacheKey: string, serializedData: CachedData) {\n    const store = CachePersistor.getStore();\n    store[cacheKey] = serializedData;\n    CachePersistor.setStore(store);\n  }\n\n  /**\n   * Get the value of store from the storage engine\n   */\n  static getStore(): StoreHashMap {\n    return JSON.parse(storageEngine.getItem(CACHE_PERSISTOR_KEY_PREFIX) || INITIAL_CACHE_VAL);\n  }\n\n  /**\n   * Overwrite the value of store inside the storage engine\n   */\n  static setStore(persistedCacheStore: StoreHashMap) {\n    storageEngine.setItem(CACHE_PERSISTOR_KEY_PREFIX, JSON.stringify(persistedCacheStore));\n  }\n\n  /**\n   * Purge the cached data from the storage engine. This won't directly affect the context's store.\n   */\n  static removeStore() {\n    storageEngine.removeItem(CACHE_PERSISTOR_KEY_PREFIX);\n  }\n}\n\nexport default CachePersistor;\n","import * as React from 'react';\n\nimport libContext from './rootContext';\nimport { CachedData, StoreHashMap } from '../interfaces';\nimport { consoleLogger, CachePersistor } from '../utils';\n\ninterface RestQueryProps {\n  children: React.ReactElement\n}\n\nfunction RestQueryProvider({ children }: RestQueryProps) {\n  const persistedCacheStore = CachePersistor.getStore();\n  const [cacheStore, setCacheStore] = React.useState<StoreHashMap>(persistedCacheStore);\n\n  /**\n   * Sets provided data to cache depending on the caching storage strategy\n   * @param cacheKey unique key as a reference to the store's hash table\n   * @param data data to cache\n   * @param opts hook options\n   */\n  function setCacheData(cacheKey: string, data: any, opts: any) {\n    // serialize data into JSON string to let the data be stored in browser storage or cookies\n    const serializedData = JSON.stringify(data);\n\n    const cachedData: CachedData = {\n      data: serializedData,\n      // TODO: implement cache expiration logic\n      cacheStoredAt: null,\n      cacheExpiredAt: null,\n    };\n\n    // Persist the serialized data into the cache persistor storage engine\n    if (opts.shouldPersist) {\n      CachePersistor.save(cacheKey, cachedData);\n    }\n\n    setCacheStore({\n      ...cacheStore,\n      [cacheKey]: cachedData,\n    });\n  }\n\n  /**\n   * Returns data stored in the Query Cache\n   * @param cacheKey unique key as a reference to the store's hash table\n   */\n  function getCachedData(cacheKey: string): any {\n    // returns null when requested cache key is not available in the store hash table\n    if (!cacheStore[cacheKey]) {\n      return null;\n    }\n\n    // TODO: implement cache expiration logic before retrieving the data\n\n    try {\n      // deserialized the cached data\n      const deserializedData = JSON.parse(cacheStore[cacheKey]?.data);\n\n      return deserializedData;\n    } catch (e) {\n      // returns null when data failed to be deserialized due to unknown reasons\n      consoleLogger.err('something went wrong when deserializing data ', e);\n\n      return null;\n    }\n  }\n\n  const ctxValue = {\n    store: cacheStore,\n    getCachedData,\n    setCacheData,\n  };\n\n  return (\n    <libContext.Provider value={ctxValue}>\n      {children}\n    </libContext.Provider>\n  );\n}\n\nexport default RestQueryProvider;\n","import * as React from 'react';\n\nimport {\n  useEffectOnce,\n  cacheKeyObfuscator,\n  consoleLogger,\n  fetcher,\n} from '../utils';\nimport rootContext from './rootContext';\n\nconst WARN_INVALID_OPTION_PROPERTY = (property: string) => `Option [${property}] is not part of the API. While this is not an error, ensure the options matches the API.`;\n\ninterface IDataState<T> {\n  isLoading: boolean\n  error?: Error\n  data?: T\n}\nconst initialDataState: IDataState<any> = {\n  isLoading: false,\n  error: null,\n  data: null,\n};\n\ntype CachePolicy = 'cache-first' | 'network-only' | 'cache-only'\n\ninterface ICachePolicies {\n  CACHE_FIRST: CachePolicy\n  NETWORK_ONLY: CachePolicy\n  CACHE_ONLY: CachePolicy\n}\n\nconst CACHE_POLICIES: ICachePolicies = {\n  CACHE_FIRST: 'cache-first',\n  NETWORK_ONLY: 'network-only',\n  CACHE_ONLY: 'cache-only',\n};\n\ntype HookOptionVal = string | boolean | null\n\ninterface IHookOptions {\n  key?: string\n  cachePolicy: CachePolicy\n  shouldPersist?: boolean\n  [optKey: string]: HookOptionVal\n}\n\nconst DEFAULT_OPTS: IHookOptions = {\n  key: null,\n  cachePolicy: CACHE_POLICIES.CACHE_FIRST,\n  shouldPersist: false,\n};\n\ninterface IOptsParam {\n  [optKey: string]: HookOptionVal\n}\n\nconst mergeOptsDefault = (optsParam: IOptsParam) => {\n  const opts = { ...DEFAULT_OPTS };\n\n  Object.keys(optsParam).forEach((property) => {\n    if (Object.prototype.hasOwnProperty.call(DEFAULT_OPTS, property)) {\n      opts[property] = optsParam[property];\n    } else {\n      consoleLogger.warn(WARN_INVALID_OPTION_PROPERTY(property));\n    }\n  });\n\n  return opts;\n};\n\nfunction useCacheable(serviceUrl: string, argOpts = DEFAULT_OPTS) {\n  const options = mergeOptsDefault(argOpts);\n  const ctx = React.useContext(rootContext);\n  const serviceCacheKey = options.key;\n\n  // Determine the cache key based on user-defined key and fallback to encoded service URL\n  // User-defined cache key disregards url into its key, so changing urls will override the data\n  const cacheKey = serviceCacheKey || cacheKeyObfuscator.encode(serviceUrl);\n  const cachedData = ctx.getCachedData(cacheKey);\n\n  // Logic flags based on Cache Policies\n  const isCacheAvailable = Boolean(cachedData);\n  const isCacheAllowed = options.cachePolicy !== CACHE_POLICIES.NETWORK_ONLY;\n  const isNetworkAllowed = [\n    CACHE_POLICIES.CACHE_FIRST,\n    CACHE_POLICIES.NETWORK_ONLY,\n  ].includes(options.cachePolicy);\n  const shouldUseCache = isCacheAvailable && isCacheAllowed;\n\n  // Prepare data for initial hook load\n  const cacheDataForBootstrap = { ...initialDataState, data: cachedData };\n  const bootstrappedData = shouldUseCache ? cacheDataForBootstrap : initialDataState;\n  const [dataState, setDataState] = React.useState(bootstrappedData);\n\n  /**\n   * Perform Fetch Side Effect from Service Url\n   * Will store the data to cache if cache is allowed\n   */\n  const performFetch = React.useCallback(async () => {\n    if (isCacheAvailable || !isNetworkAllowed) {\n      return;\n    }\n\n    // start the fetcher processes\n    setDataState({ ...dataState, isLoading: true });\n    const data = await fetcher.get(serviceUrl);\n    setDataState({ ...dataState, data });\n\n    // set fetched data to cache\n    if (isCacheAllowed) {\n      ctx.setCacheData(cacheKey, data, options);\n    }\n  }, [\n    isCacheAvailable,\n    isNetworkAllowed,\n    dataState,\n    serviceUrl,\n    isCacheAllowed,\n    ctx,\n    cacheKey,\n    options,\n  ]);\n\n  useEffectOnce(() => {\n    performFetch();\n  });\n\n  return dataState;\n}\n\nexport default useCacheable;\n","const obsfuscator = {\n  encode: (str: string) => btoa(str),\n};\n\nexport default obsfuscator;\n","import * as React from 'react';\nimport {\n  useEffectOnce,\n  consoleLogger,\n  fetcher,\n} from '../utils';\n\nconst WARN_INVALID_OPTION_PROPERTY = (property: string) => `Option [${property}] is not part of the API. While this is not an error, ensure the options matches the API.`;\n\ninterface Fetchable<TResponseData> {\n  isLoading: boolean\n  error?: Error\n  data?: TResponseData\n  refetch?: () => void\n}\n\nconst initialDataState: Fetchable<any> = {\n  isLoading: false,\n  error: null,\n  data: null,\n  refetch: () => {},\n};\n\ntype HookOptionVal = string | boolean | null\ntype HttpMethods = 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE'\n\ninterface IHookOptions {\n  key?: string\n  httpFetchMethod?: HttpMethods\n  httpFetchBody?: any\n  [optKey: string]: HookOptionVal\n}\n\nconst DEFAULT_OPTS: IHookOptions = {\n  key: null,\n  httpFetchMethod: 'GET',\n  httpFetchBody: null,\n};\n\ninterface IOptsParam {\n  [optKey: string]: HookOptionVal\n}\n\nconst mergeOptsDefault = (optsParam: IOptsParam) => {\n  const opts = { ...DEFAULT_OPTS };\n\n  Object.keys(optsParam).forEach((property) => {\n    if (Object.prototype.hasOwnProperty.call(DEFAULT_OPTS, property)) {\n      opts[property] = optsParam[property];\n    } else {\n      consoleLogger.warn(WARN_INVALID_OPTION_PROPERTY(property));\n    }\n  });\n\n  return opts;\n};\n\n/**\n * Hook to Fetch data without any Cache or any other means of data intervention\n * Fetches only once per component mounted, until the refetch method is requested\n * @param serviceUrl URL endpoint to fetch data from\n * @param argOpts Options to modify the behaviour and other configurables\n */\nfunction useFetchable(serviceUrl: string, argOpts = DEFAULT_OPTS) {\n  const options = mergeOptsDefault(argOpts);\n\n  const [dataState, setDataState] = React.useState(initialDataState);\n\n  /**\n   * Perform fetch from service url according to the HTTP methods specified in the options\n   */\n  const performFetch = React.useCallback(async () => {\n    // start the fetcher processes\n    setDataState({ ...dataState, isLoading: true });\n\n    let fetcherResponseData;\n\n    if (options.httpFetchMethod === 'GET') {\n      fetcherResponseData = await fetcher.get(serviceUrl);\n    }\n\n    if (options.httpFetchMethod === 'POST') {\n      fetcherResponseData = await fetcher.post(serviceUrl, options.httpFetchBody);\n    }\n\n    if (options.httpFetchMethod === 'PUT') {\n      fetcherResponseData = await fetcher.put(serviceUrl, options.httpFetchBody);\n    }\n\n    if (options.httpFetchMethod === 'DELETE') {\n      fetcherResponseData = await fetcher.performDelete(serviceUrl);\n    }\n\n    if (options.httpFetchMethod === 'PATCH') {\n      fetcherResponseData = await fetcher.patch(serviceUrl, options.httpFetchBody);\n    }\n\n    // mutate the response data into fetchable data state\n    setDataState({ ...dataState, data: fetcherResponseData });\n  }, [dataState, options.httpFetchBody, options.httpFetchMethod, serviceUrl]);\n\n  useEffectOnce(() => {\n    performFetch();\n\n    // TODO: handle fetch abortion during unmounting to avoid memory leak and wasted API calls\n  });\n\n  return { ...dataState, refetch: performFetch };\n}\n\nexport default useFetchable;\n","import * as React from 'react';\nimport { useEffectOnce, fetcher, consoleLogger } from '../utils';\n\nconst WARN_INVALID_OPTION_PROPERTY = (property: string) => `Option [${property}] is not part of the API. While this is not an error, ensure the options matches the API.`;\n\nconst IDENTITY = (data: any) => data;\nconst EMPTY = () => ({});\nconst NO_OP = () => {};\n\ntype CallbackFunc = (data: any) => any\n\ninterface IStreamableDataState<T> {\n  isStreaming: boolean,\n  isStreamingDone: boolean,\n  error: Error | null,\n  data: T | null,\n}\n\nconst initialDataState: IStreamableDataState<any> = {\n  isStreaming: false,\n  isStreamingDone: false,\n  error: null,\n  data: null,\n};\n\ntype StreamDataFlow = 'stack' | 'object';\ntype HookOptionVal = string | boolean | CallbackFunc | null\n\ninterface IStreamHookOption {\n  streamEndFlag: string,\n  reqBodyParamsKey: string,\n  initialRequestBodyParams: any | null,\n  responseReqBodyExtractorKey: string,\n  stopStreamOnError: boolean,\n  stackDataMapper: any,\n  stackDataReducer: any,\n  onStreamEnd: any,\n  onNextTick: any,\n  onStreamError: any,\n  streamDataFlow: StreamDataFlow\n  [optKey: string]: HookOptionVal\n}\n\nconst DEFAULT_OPTS: IStreamHookOption = {\n  // flag to decide when a stream should be ended. Deep field NOT YET SUPPORTED.\n  streamEndFlag: 'isStreamEnded',\n  // Field that works as a body params for the next request. Deep field NOT YET SUPPORTED.\n  reqBodyParamsKey: 'requestKeys',\n  // Specify the requestBodyParams value that performed during the first time of streaming process\n  initialRequestBodyParams: null,\n  // Field that is going to be passed to the next `reqBodyParamsKey`\n  // from previous streaming response. Deep field NOT YET SUPPORTED.\n  responseReqBodyExtractorKey: 'requestKeys',\n  // if set to true, streaming will stop when api returns error\n  stopStreamOnError: false,\n  stackDataMapper: IDENTITY,\n  stackDataReducer: EMPTY,\n  onStreamEnd: NO_OP,\n  onNextTick: NO_OP,\n  onStreamError: NO_OP,\n  streamDataFlow: 'stack', // stack | object, STACK will place all responses into a single array. OBJECT will replace.\n};\n\ninterface IOptsParam {\n  [optKey: string]: HookOptionVal\n}\n\nconst mergeOptsDefault = (optsParam: IOptsParam) => {\n  const opts = { ...DEFAULT_OPTS };\n\n  Object.keys(optsParam).forEach((property) => {\n    if (Object.prototype.hasOwnProperty.call(DEFAULT_OPTS, property)) {\n      opts[property] = optsParam[property];\n    } else {\n      consoleLogger.warn(WARN_INVALID_OPTION_PROPERTY(property));\n    }\n  });\n\n  return opts;\n};\n\n/**\n * Fetches streaming data and returns the of streaming\n * response, depending on the stream data flow shape\n * Current implementation uses POST request\n * @param {string} serviceUrl\n * @param {*} argOpts\n */\nfunction useStreamable(serviceUrl: string, argOpts = DEFAULT_OPTS) {\n  const options = mergeOptsDefault(argOpts);\n  const [dataState, setDataState] = React.useState(initialDataState);\n\n  // Run PerformFetch function recursively while mutating the streamQueue\n  // streamQueue might be spammed with lots of responses, but after streaming done performed,\n  // the value will automatically be garbage collected.\n  const performFetch = React.useCallback(async (requestBodyParams = {}, streamQueue = []) => {\n    try {\n      const streamDataResponse = await fetcher.post(serviceUrl, requestBodyParams);\n\n      options.onNextTick();\n\n      if (streamDataResponse[options.streamEndFlag] === false) {\n        // perform next fetch with updated stream bodyParamsKey as request body\n        performFetch(\n          { [options.reqBodyParamsKey]: streamDataResponse[options.responseReqBodyExtractorKey] },\n          [...streamQueue, { ...streamDataResponse }],\n        );\n\n        return;\n      }\n\n      if (streamDataResponse[options.streamEndFlag] === true) {\n        options.onStreamEnd();\n\n        if (options.streamDataFlow === 'stack') {\n          setDataState({\n            ...dataState,\n            data: [...streamQueue, { ...streamDataResponse }].map(options.stackDataMapper),\n          });\n\n          return;\n        }\n\n        if (options.streamDataFlow === 'object') {\n          setDataState({\n            ...dataState,\n            data: [...streamQueue, { ...streamDataResponse }]\n              .map(options.stackDataMapper)\n              .reduce(options.stackDataReducer),\n          });\n\n          return;\n        }\n      }\n\n      consoleLogger.warn('Stream ended due to stream ending flag is not found or not a proper boolean value');\n      return;\n    } catch (e) {\n      consoleLogger.err('something went wrong ', e);\n    }\n  }, [serviceUrl, options, dataState]);\n\n  useEffectOnce(() => {\n    performFetch({ [options.reqBodyParamsKey]: options.initialRequestBodyParams });\n  });\n\n  return dataState;\n}\n\nexport default useStreamable;\n"],"names":["React","store","fetcher","url","window","fetch","response","json","bodyParams","method","body","JSON","stringify","useEffectOnce","fn","WARN_LEADING","ERR_LEADING","console","warn","error","storageEngine","localStorage","CachePersistor","save","cacheKey","serializedData","getStore","setStore","parse","getItem","persistedCacheStore","setItem","removeStore","removeItem","RestQueryProvider","children","cacheStore","setCacheStore","libContext","Provider","value","getCachedData","_cacheStore$cacheKey","data","e","consoleLogger","setCacheData","opts","cachedData","cacheStoredAt","cacheExpiredAt","shouldPersist","initialDataState","isLoading","CACHE_POLICIES","CACHE_FIRST","NETWORK_ONLY","CACHE_ONLY","DEFAULT_OPTS","key","cachePolicy","useCacheable","serviceUrl","argOpts","optsParam","options","Object","keys","forEach","property","prototype","hasOwnProperty","call","WARN_INVALID_OPTION_PROPERTY","ctx","rootContext","btoa","isCacheAvailable","Boolean","isCacheAllowed","isNetworkAllowed","includes","shouldUseCache","cacheDataForBootstrap","dataState","setDataState","performFetch","refetch","httpFetchMethod","httpFetchBody","useFetchable","fetcherResponseData","NO_OP","isStreaming","isStreamingDone","streamEndFlag","reqBodyParamsKey","initialRequestBodyParams","responseReqBodyExtractorKey","stopStreamOnError","stackDataMapper","stackDataReducer","onStreamEnd","onNextTick","onStreamError","streamDataFlow","useStreamable","requestBodyParams","streamQueue","streamDataResponse","map","reduce"],"mappings":"sUAeA,MAAeA,EAAiC,CAAEC,MAAO,OCgEnDC,WA5DaC,8BACMC,OAAOC,MAAMF,kBAA9BG,0BACaA,EAASC,8CA0DxBL,WAjDcC,EAAaK,8BACRJ,OAAOC,MAAMF,EAAK,CACvCM,OAAQ,OACRC,KAAMC,KAAKC,UAAUJ,oBAFjBF,0BAIaA,EAASC,8CC3B9B,SAASM,EAAcC,GAErBd,EAAgBc,EAAI,ICRtB,IAAMC,EAAe,2BACfC,EAAc,2BAGZ,oBACJC,SAAQC,cAAKH,wCAEV,oBACHE,SAAQE,eAAMH,sCCNZI,EAAgBhB,OAAOiB,aAOdC,oCAINC,KAAP,SAAYC,EAAkBC,GAC5B,IAAMxB,EAAQqB,EAAeI,WAC7BzB,EAAMuB,GAAYC,EAClBH,EAAeK,SAAS1B,MAMnByB,SAAP,WACE,OAAOf,KAAKiB,MAAMR,EAAcS,QAvBD,mCACT,SA4BjBF,SAAP,SAAgBG,GACdV,EAAcW,QA9BiB,iCA8BmBpB,KAAKC,UAAUkB,OAM5DE,YAAP,WACEZ,EAAca,WArCiB,wCCQnC,SAASC,SAAoBC,IAAAA,SACrBL,EAAsBR,EAAeI,aACP1B,EAA6B8B,GAA1DM,OAAYC,OA6DnB,OACErC,EAACsC,EAAWC,UAASC,MAPN,CACfvC,MAAOmC,EACPK,cAvBF,SAAuBjB,GAErB,IAAKY,EAAWZ,GACd,YAKF,UAIE,OAFyBb,KAAKiB,eAAMQ,EAAWZ,WAAXkB,EAAsBC,MAG1D,MAAOC,GAIP,OAFAC,EAAkB,gDAAiDD,UASrEE,aAlDF,SAAsBtB,EAAkBmB,EAAWI,SAI3CC,EAAyB,CAC7BL,KAHqBhC,KAAKC,UAAU+B,GAKpCM,cAAe,KACfC,eAAgB,MAIdH,EAAKI,eACP7B,EAAeC,KAAKC,EAAUwB,GAGhCX,OACKD,UACFZ,GAAWwB,UAqCXb,GCjEP,IAOMiB,EAAoC,CACxCC,WAAW,EACXlC,MAAO,KACPwB,KAAM,MAWFW,EAAiC,CACrCC,YAAa,cACbC,aAAc,eACdC,WAAY,cAYRC,EAA6B,CACjCC,IAAK,KACLC,YAAaN,EAAeC,YAC5BJ,eAAe,GAqBjB,SAASU,EAAaC,EAAoBC,YAAAA,IAAAA,EAAUL,GAClD,IAfwBM,EAClBjB,EAcAkB,GAfkBD,EAeSD,EAd3BhB,OAAYW,GAElBQ,OAAOC,KAAKH,GAAWI,QAAQ,SAACC,GAC1BH,OAAOI,UAAUC,eAAeC,KAAKd,EAAcW,GACrDtB,EAAKsB,GAAYL,EAAUK,GAE3BxB,EArD+B,SAACwB,oBAAgCA,8FAqD7CI,CAA6BJ,MAI7CtB,GAKD2B,EAAM1E,EAAiB2E,GAKvBnD,EAJkByC,EAAQN,KCxEPiB,KD4EqCd,GACxDd,EAAa0B,EAAIjC,cAAcjB,GAG/BqD,EAAmBC,QAAQ9B,GAC3B+B,EAAiBd,EAAQL,cAAgBN,EAAeE,aACxDwB,EAAmB,CACvB1B,EAAeC,YACfD,EAAeE,cACfyB,SAAShB,EAAQL,aACbsB,EAAiBL,GAAoBE,EAGrCI,OAA6B/B,GAAkBT,KAAMK,MAEzBhD,EADTkF,EAAiBC,EAAwB/B,GAC3DgC,OAAWC,OAMZC,EAAetF,iBACnB,OAAI6E,IAAqBG,qBAKzBK,OAAkBD,GAAW/B,WAAW,qBACrBnD,EAAY4D,kBAAzBnB,GACN0C,OAAkBD,GAAWzC,KAAAA,KAGzBoC,GACFL,EAAI5B,aAAatB,EAAUmB,EAAMsB,MAZhB,oCAclB,CACDY,EACAG,EACAI,EACAtB,EACAiB,EACAL,EACAlD,EACAyC,IAOF,OAJApD,EAAc,WACZyE,MAGKF,EExHT,IASMhC,EAAmC,CACvCC,WAAW,EACXlC,MAAO,KACPwB,KAAM,KACN4C,QAAS,cAaL7B,EAA6B,CACjCC,IAAK,KACL6B,gBAAiB,MACjBC,cAAe,MA2BjB,SAASC,EAAa5B,EAAoBC,YAAAA,IAAAA,EAAUL,GAClD,IArBwBM,EAClBjB,EAoBAkB,GArBkBD,EAqBSD,EApB3BhB,OAAYW,GAElBQ,OAAOC,KAAKH,GAAWI,QAAQ,SAACC,GAC1BH,OAAOI,UAAUC,eAAeC,KAAKd,EAAcW,GACrDtB,EAAKsB,GAAYL,EAAUK,GAE3BxB,EA3C+B,SAACwB,oBAAgCA,8FA2C7CI,CAA6BJ,MAI7CtB,KAY2B/C,EAAeoD,GAA1CgC,OAAWC,OAKZC,EAAetF,qBAIf2F,mEAuBJN,OAAkBD,GAAWzC,KAAMgD,yBALH,UAA5B1B,EAAQuB,gDPvBKrF,EAAaK,8BACTJ,OAAOC,MAAMF,EAAK,CACvCM,OAAQ,QACRC,KAAMC,KAAKC,UAAUJ,oBAFjBF,0BAIaA,EAASC,6COmBIL,CAAc4D,EAAYG,EAAQwB,iCAA9DE,4DAL8B,WAA5B1B,EAAQuB,gDPhCarF,8BACJC,OAAOC,MAAMF,EAAK,CACvCM,OAAQ,0BADJH,0BAGaA,EAASC,6CO6BIL,CAAsB4D,qBAAlD6B,4DAL8B,QAA5B1B,EAAQuB,gDPzCGrF,EAAaK,8BACPJ,OAAOC,MAAMF,EAAK,CACvCM,OAAQ,MACRC,KAAMC,KAAKC,UAAUJ,oBAFjBF,0BAIaA,EAASC,6COqCIL,CAAY4D,EAAYG,EAAQwB,iCAA5DE,4DAL8B,SAA5B1B,EAAQuB,uCACkBtF,EAAa4D,EAAYG,EAAQwB,iCAA7DE,yCATFN,OAAkBD,GAAW/B,WAAW,yBAIR,QAA5BY,EAAQuB,uCACkBtF,EAAY4D,qBAAxC6B,yDAPiB,oCA4BlB,CAACP,EAAWnB,EAAQwB,cAAexB,EAAQuB,gBAAiB1B,IAQ/D,OANAjD,EAAc,WACZyE,WAKUF,GAAWG,QAASD,ICxGlC,IAIMM,EAAQ,aAWRxC,EAA8C,CAClDyC,aAAa,EACbC,iBAAiB,EACjB3E,MAAO,KACPwB,KAAM,MAqBFe,EAAkC,CAEtCqC,cAAe,gBAEfC,iBAAkB,cAElBC,yBAA0B,KAG1BC,4BAA6B,cAE7BC,mBAAmB,EACnBC,gBAlDe,SAACzD,UAAcA,GAmD9B0D,iBAlDY,iBAAO,IAmDnBC,YAAaV,EACbW,WAAYX,EACZY,cAAeZ,EACfa,eAAgB,SA4BlB,SAASC,EAAc5C,EAAoBC,YAAAA,IAAAA,EAAUL,GACnD,IAtBwBM,EAClBjB,EAqBAkB,GAtBkBD,EAsBSD,EArB3BhB,OAAYW,GAElBQ,OAAOC,KAAKH,GAAWI,QAAQ,SAACC,GAC1BH,OAAOI,UAAUC,eAAeC,KAAKd,EAAcW,GACrDtB,EAAKsB,GAAYL,EAAUK,GAE3BxB,EAvE+B,SAACwB,oBAAgCA,8FAuE7CI,CAA6BJ,MAI7CtB,KAY2B/C,EAAeoD,GAA1CgC,OAAWC,OAKZC,EAAetF,WAAyB2G,EAAwBC,YAAxBD,IAAAA,EAAoB,aAAIC,IAAAA,EAAc,uEAE/C1G,EAAa4D,EAAY6C,kBAApDE,GAIN,GAFA5C,EAAQsC,cAE0C,IAA9CM,EAAmB5C,EAAQ8B,eAA/B,CAUA,IAAkD,IAA9Cc,EAAmB5C,EAAQ8B,eAAyB,CAGtD,GAFA9B,EAAQqC,cAEuB,UAA3BrC,EAAQwC,eAMV,YALApB,OACKD,GACHzC,KAAM,UAAIiE,QAAkBC,KAAsBC,IAAI7C,EAAQmC,oBAMlE,GAA+B,WAA3BnC,EAAQwC,eAQV,YAPApB,OACKD,GACHzC,KAAM,UAAIiE,QAAkBC,KACzBC,IAAI7C,EAAQmC,iBACZW,OAAO9C,EAAQoC,qBAOxBxD,EAAmB,yFAlCnB,OAEEyC,UACKrB,EAAQ+B,kBAAmBa,EAAmB5C,EAAQiC,0CACrDU,QAAkBC,8EAgCnBjE,GACPC,EAAkB,wBAAyBD,MA3C1B,oCA6ClB,CAACkB,EAAYG,EAASmB,IAMzB,OAJAvE,EAAc,iBACZyE,UAAgBrB,EAAQ+B,kBAAmB/B,EAAQgC,+BAG9Cb"}