{"version":3,"file":"index.js","sources":["../src/core/context.ts","../src/utils/useEffectOnce.ts","../src/core/useCacheable.ts","../src/core/useStreamable.ts","../src/core/Provider.tsx","../src/utils/cacheKeyObfuscator.ts","../src/utils/fetcher.ts"],"sourcesContent":["import * as React from 'react';\n\ninterface ICachedData {\n  data?: string\n  cacheStoredAt?: string\n  cacheExpiredAt?: string\n}\n\nexport interface ICoreContextStore {\n  [cacheDataKey: string]: ICachedData\n}\n\ninterface ICoreContextAttrs {\n  store: ICoreContextStore\n}\n\ninterface ICoreContextMethods {\n  getCachedData?(cacheKey: string): string\n  setCacheData?(cacheKey: string, data: any): void\n}\n\ntype CoreContext = ICoreContextAttrs & ICoreContextMethods\n\nexport default React.createContext<CoreContext>({ store: null });\n","import * as React from 'react';\n\ntype UseEffectHandler = (...args: any[]) => void\n\nfunction useEffectOnce(fn: UseEffectHandler) {\n  React.useEffect(fn, []);\n}\n\nexport default useEffectOnce;\n","import * as React from 'react';\nimport { useEffectOnce, cacheKeyObfuscator, fetcher } from '../utils';\n\nimport libContext from './context';\n\nconst WARN_LEADING = '[RESTICACHE WARNING]';\nconst WARN_INVALID_OPTION_PROPERTY = (property: string) => `Option [${property}] is not part of the API. While this is not an error, ensure the options matches the API.`;\n\ninterface IDataState<T> {\n  isLoading: boolean\n  error?: Error\n  data?: T\n}\nconst initialDataState: IDataState<any> = {\n  isLoading: false,\n  error: null,\n  data: null,\n};\n\ntype CachePolicy = 'cache-first' | 'network-only' | 'cache-only'\n\ninterface ICachePolicies {\n  CACHE_FIRST: CachePolicy\n  NETWORK_ONLY: CachePolicy\n  CACHE_ONLY: CachePolicy\n}\n\nconst CACHE_POLICIES: ICachePolicies = {\n  CACHE_FIRST: 'cache-first',\n  NETWORK_ONLY: 'network-only',\n  CACHE_ONLY: 'cache-only',\n};\n\ntype HookOptionVal = string | boolean | null\n\ninterface IHookOptions {\n  key?: string\n  cachePolicy: CachePolicy\n  [optKey: string]: HookOptionVal\n}\n\nconst DEFAULT_OPTS: IHookOptions = {\n  key: null,\n  cachePolicy: CACHE_POLICIES.CACHE_FIRST,\n\n};\n\ninterface IOptsParam {\n  [optKey: string]: HookOptionVal\n}\n\nconst mergeOptsDefault = (optsParam: IOptsParam) => {\n  const opts = { ...DEFAULT_OPTS };\n\n  Object.keys(optsParam).forEach((property) => {\n    if (Object.prototype.hasOwnProperty.call(DEFAULT_OPTS, property)) {\n      opts[property] = optsParam[property];\n    } else {\n      // eslint-disable-next-line no-console\n      console.warn(WARN_LEADING, WARN_INVALID_OPTION_PROPERTY(property));\n    }\n  });\n\n  return opts;\n};\n\nfunction useCacheable(serviceUrl: string, argOpts = DEFAULT_OPTS) {\n  const options = mergeOptsDefault(argOpts);\n  const ctx = React.useContext(libContext);\n  const serviceCacheKey = options.key;\n\n  // Determine the cache key based on user-defined key and fallback to encoded service URL\n  // User-defined cache key disregards url into its key, so changing urls will override the data\n  const cacheKey = serviceCacheKey || cacheKeyObfuscator.encode(serviceUrl);\n  const cachedData = ctx.getCachedData(cacheKey);\n\n  // Logic flags based on Cache Policies\n  const isCacheAvailable = Boolean(cachedData);\n  const isCacheAllowed = options.cachePolicy !== CACHE_POLICIES.NETWORK_ONLY;\n  const isNetworkAllowed = [\n    CACHE_POLICIES.CACHE_FIRST,\n    CACHE_POLICIES.NETWORK_ONLY,\n  ].includes(options.cachePolicy);\n  const shouldUseCache = isCacheAvailable && isCacheAllowed;\n\n  // Prepare data for initial hook load\n  const cacheDataForBootstrap = { ...initialDataState, data: cachedData };\n  const bootstrappedData = shouldUseCache ? cacheDataForBootstrap : initialDataState;\n  const [dataState, setDataState] = React.useState(bootstrappedData);\n\n  /**\n   * Perform Fetch Side Effect from Service Url\n   * Will store the data to cache if cache is allowed\n   */\n  const performFetch = React.useCallback(async () => {\n    if (isCacheAvailable || !isNetworkAllowed) {\n      return;\n    }\n\n    // start the fetcher processes\n    setDataState({ ...dataState, isLoading: true });\n    const data = await fetcher.get(serviceUrl);\n    setDataState({ ...dataState, data });\n\n    // set fetched data to cache\n    if (isCacheAllowed) {\n      ctx.setCacheData(cacheKey, data);\n    }\n  }, [isCacheAvailable, isNetworkAllowed, dataState, serviceUrl, isCacheAllowed, ctx, cacheKey]);\n\n  useEffectOnce(() => {\n    performFetch();\n  });\n\n  return dataState;\n}\n\nexport default useCacheable;\n","import * as React from 'react';\nimport { useEffectOnce, fetcher } from '../utils';\n\nconst WARN_LEADING = '[RESTICACHE WARNING]';\nconst WARN_INVALID_OPTION_PROPERTY = (property: string) => `Option [${property}] is not part of the API. While this is not an error, ensure the options matches the API.`;\n\nconst IDENTITY = (data: any) => data;\nconst EMPTY = () => ({});\nconst NO_OP = () => {};\n\ntype CallbackFunc = (data: any) => any\n\ninterface IStreamableDataState<T> {\n  isStreaming: boolean,\n  isStreamingDone: boolean,\n  error: Error | null,\n  data: T | null,\n}\n\nconst initialDataState: IStreamableDataState<any> = {\n  isStreaming: false,\n  isStreamingDone: false,\n  error: null,\n  data: null,\n};\n\ntype StreamDataFlow = 'stack' | 'object';\ntype HookOptionVal = string | boolean | CallbackFunc | null\n\ninterface IStreamHookOption {\n  streamEndFlag: string,\n  reqBodyParamsKey: string,\n  initialRequestBodyParams: any | null,\n  responseReqBodyExtractorKey: string,\n  stopStreamOnError: boolean,\n  stackDataMapper: any,\n  stackDataReducer: any,\n  onStreamEnd: any,\n  onNextTick: any,\n  onStreamError: any,\n  streamDataFlow: StreamDataFlow\n  [optKey: string]: HookOptionVal\n}\n\nconst DEFAULT_OPTS: IStreamHookOption = {\n  // flag to decide when a stream should be ended. Deep field NOT YET SUPPORTED.\n  streamEndFlag: 'isStreamEnded',\n  // Field that works as a body params for the next request. Deep field NOT YET SUPPORTED.\n  reqBodyParamsKey: 'requestKeys',\n  // Specify the requestBodyParams value that performed during the first time of streaming process\n  initialRequestBodyParams: null,\n  // Field that is going to be passed to the next `reqBodyParamsKey`\n  // from previous streaming response. Deep field NOT YET SUPPORTED.\n  responseReqBodyExtractorKey: 'requestKeys',\n  // if set to true, streaming will stop when api returns error\n  stopStreamOnError: false,\n  stackDataMapper: IDENTITY,\n  stackDataReducer: EMPTY,\n  onStreamEnd: NO_OP,\n  onNextTick: NO_OP,\n  onStreamError: NO_OP,\n  streamDataFlow: 'stack', // stack | object, STACK will place all responses into a single array. OBJECT will replace.\n};\n\ninterface IOptsParam {\n  [optKey: string]: HookOptionVal\n}\n\nconst mergeOptsDefault = (optsParam: IOptsParam) => {\n  const opts = { ...DEFAULT_OPTS };\n\n  Object.keys(optsParam).forEach((property) => {\n    if (Object.prototype.hasOwnProperty.call(DEFAULT_OPTS, property)) {\n      opts[property] = optsParam[property];\n    } else {\n      // eslint-disable-next-line no-console\n      console.warn(WARN_LEADING, WARN_INVALID_OPTION_PROPERTY(property));\n    }\n  });\n\n  return opts;\n};\n\n/**\n * Fetches streaming data and returns the of streaming\n * response, depending on the stream data flow shape\n * Current implementation uses POST request\n * @param {string} serviceUrl\n * @param {*} argOpts\n */\nfunction useStreamable(serviceUrl: string, argOpts = DEFAULT_OPTS) {\n  const options = mergeOptsDefault(argOpts);\n  const [dataState, setDataState] = React.useState(initialDataState);\n\n  // Run PerformFetch function recursively while mutating the streamQueue\n  // streamQueue might be spammed with lots of responses, but after streaming done performed,\n  // the value will automatically be garbage collected.\n  const performFetch = React.useCallback(async (requestBodyParams = {}, streamQueue = []) => {\n    try {\n      const streamDataResponse = await fetcher.post(serviceUrl, requestBodyParams);\n\n      options.onNextTick();\n\n      if (streamDataResponse[options.streamEndFlag] === false) {\n        // perform next fetch with updated stream bodyParamsKey as request body\n        performFetch(\n          { [options.reqBodyParamsKey]: streamDataResponse[options.responseReqBodyExtractorKey] },\n          [...streamQueue, { ...streamDataResponse }],\n        );\n\n        return;\n      }\n\n      if (streamDataResponse[options.streamEndFlag] === true) {\n        options.onStreamEnd();\n\n        if (options.streamDataFlow === 'stack') {\n          setDataState({\n            ...dataState,\n            data: [...streamQueue, { ...streamDataResponse }].map(options.stackDataMapper),\n          });\n\n          return;\n        }\n\n        if (options.streamDataFlow === 'object') {\n          setDataState({\n            ...dataState,\n            data: [...streamQueue, { ...streamDataResponse }]\n              .map(options.stackDataMapper)\n              .reduce(options.stackDataReducer),\n          });\n\n          return;\n        }\n      }\n\n      // eslint-disable-next-line no-console\n      console.warn('Stream ended due to stream ending flag is not found or not a proper boolean value');\n      return;\n    } catch (e) {\n      // eslint-disable-next-line no-console\n      console.log('something went wrong ', e);\n    }\n  }, [serviceUrl, options, dataState]);\n\n  useEffectOnce(() => {\n    performFetch({ [options.reqBodyParamsKey]: options.initialRequestBodyParams });\n  });\n\n  return dataState;\n}\n\nexport default useStreamable;\n","import * as React from 'react';\n\nimport libContext, { ICoreContextStore } from './context';\n\nconst ERR_LEADING = '[RESTICACHE ERROR]';\n\ninterface IProps {\n  children: React.ReactElement\n}\nfunction RestQueryProvider({ children }: IProps) {\n  const [cacheStore, setCacheStore] = React.useState<ICoreContextStore>({});\n\n  /**\n   * set data to cache based on provided cache key or encoded url\n   */\n  function setCacheData(cacheKey: string, data: any) {\n    // serialize data into JSON string to let the data be stored in browser storage or cookies\n    const serializedData = JSON.stringify(data);\n\n    // TODO: store serialized data to cookie or local storage\n    setCacheStore({\n      ...cacheStore,\n      [cacheKey]: {\n        data: serializedData,\n        // TODO: implement cache expiration logic\n        cacheStoredAt: null,\n        cacheExpiredAt: null,\n      },\n    });\n  }\n\n  /**\n   * get data based on provided cache key or encoded url\n   */\n  function getCachedData(cacheKey: string) {\n    if (!cacheStore[cacheKey]) {\n      return null;\n    }\n\n    try {\n      const deserializedData = JSON.parse(cacheStore[cacheKey]?.data);\n      return deserializedData;\n    } catch (e) {\n      // eslint-disable-next-line no-console\n      console.log(ERR_LEADING, e);\n      return null;\n    }\n  }\n\n  const ctxValue = {\n    store: cacheStore,\n    getCachedData,\n    setCacheData,\n  };\n\n  return (\n    <libContext.Provider value={ctxValue}>\n      {children}\n    </libContext.Provider>\n  );\n}\n\nexport default RestQueryProvider;\n","const obsfuscator = {\n  encode: (str: string) => btoa(str),\n  decode: (str: string) => atob(str),\n};\n\nexport default obsfuscator;\n","/**\n * Fetcher Engine. Can and should be replaced by any other fetcher\n * Should support POST method and HTTP Call Aborting as well!\n * @param  {string} url\n */\nasync function get(url: string) {\n  const response = await window.fetch(url);\n  const data = await response.json();\n  return data;\n}\n\nasync function post(url: string, bodyParams: any) {\n  const response = await window.fetch(url, {\n    method: 'POST',\n    body: JSON.stringify(bodyParams),\n  });\n  const data = await response.json();\n  return data;\n}\n\nconst fetcher = {\n  get,\n  post,\n};\n\nexport default fetcher;\n"],"names":["React","store","useEffectOnce","fn","initialDataState","isLoading","error","data","CACHE_POLICIES","CACHE_FIRST","NETWORK_ONLY","CACHE_ONLY","DEFAULT_OPTS","key","cachePolicy","NO_OP","isStreaming","isStreamingDone","streamEndFlag","reqBodyParamsKey","initialRequestBodyParams","responseReqBodyExtractorKey","stopStreamOnError","stackDataMapper","stackDataReducer","onStreamEnd","onNextTick","onStreamError","streamDataFlow","children","cacheStore","setCacheStore","libContext","Provider","value","getCachedData","cacheKey","JSON","parse","_cacheStore$cacheKey","e","console","log","setCacheData","serializedData","stringify","cacheStoredAt","cacheExpiredAt","serviceUrl","argOpts","optsParam","opts","options","Object","keys","forEach","property","prototype","hasOwnProperty","call","warn","WARN_INVALID_OPTION_PROPERTY","ctx","btoa","cachedData","isCacheAvailable","Boolean","isCacheAllowed","isNetworkAllowed","includes","shouldUseCache","cacheDataForBootstrap","dataState","setDataState","performFetch","url","window","fetch","response","json","fetcher","requestBodyParams","streamQueue","bodyParams","method","body","streamDataResponse","map","reduce"],"mappings":"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"}