{"version":3,"file":"index.js","sources":["../src/core/rootContext.ts","../src/utils/fetcher.ts","../src/utils/useEffectOnce.ts","../src/utils/consoleLogger.ts","../src/utils/cachePersistor.ts","../src/core/useCacheable.ts","../src/core/useFetchable.ts","../src/core/useStreamable.ts","../src/core/Provider.tsx","../src/utils/cacheKeyObfuscator.ts"],"sourcesContent":["import * as React from 'react';\n\nimport { StoreHashMap } from '../interfaces';\n\ninterface CoreContextAttributes {\n  store: StoreHashMap\n}\n\ninterface CoreContextMethods {\n  getCachedData?(cacheKey: string): string\n  setCacheData?(cacheKey: string, data: any, opts: any): void\n}\n\nexport type CoreContext = CoreContextAttributes & CoreContextMethods\n\nexport default React.createContext<CoreContext>({ store: null });\n","/*\nFetcher Engine which contains tipical RESTful HTTP Method operations.\nOnly supports client-side fetching and might change its implementation\ndepending on the implementation of Abort request and upcoming SSR strategy.\n*/\n\n// Fetcher HTTP object signature\ninterface Fetcher {\n  get: (url: string) => Promise<any>\n  post: (url: string, bodyParams: any) => Promise<any>\n  put: (url: string, bodyParams: any) => Promise<any>\n  performDelete: (url: string) => Promise<any>\n  patch: (url: string, bodyParams: any) => Promise<any>\n}\n\n/**\n * Fetch GET request\n * @param url service url to fetch from\n */\nasync function get(url: string):Promise<any> {\n  const response = await window.fetch(url);\n  const data = await response.json();\n  return data;\n}\n\n/**\n * Fetch POST request\n * @param url service url to fetch from\n * @param bodyParams body to set to POST request\n */\nasync function post(url: string, bodyParams: any):Promise<any> {\n  const response = await window.fetch(url, {\n    method: 'POST',\n    body: JSON.stringify(bodyParams),\n  });\n  const data = await response.json();\n  return data;\n}\n\n/**\n * Fetch PUT request\n * @param url service url to fetch from\n * @param bodyParams body to set to PUT request\n */\nasync function put(url: string, bodyParams: any):Promise<any> {\n  const response = await window.fetch(url, {\n    method: 'PUT',\n    body: JSON.stringify(bodyParams),\n  });\n  const data = await response.json();\n  return data;\n}\n\n/**\n * Fetch DELETE request\n * @param url service url to fetch from\n */\nasync function performDelete(url: string):Promise<any> {\n  const response = await window.fetch(url, {\n    method: 'DELETE',\n  });\n  const data = await response.json();\n  return data;\n}\n\n/**\n * Fetch PATCH request\n * @param url service url to fetch from\n * @param bodyParams body to set to PATCH request\n */\nasync function patch(url: string, bodyParams: any):Promise<any> {\n  const response = await window.fetch(url, {\n    method: 'PATCH',\n    body: JSON.stringify(bodyParams),\n  });\n  const data = await response.json();\n  return data;\n}\n\nconst fetcher: Fetcher = {\n  get,\n  post,\n  put,\n  performDelete,\n  patch,\n};\n\nexport default fetcher;\n","import * as React from 'react';\n\ntype UseEffectHandler = (...args: any[]) => void\n\n/**\n * React useEffect which runs only once per component lifecycle\n * @param fn effect function to run once\n */\nfunction useEffectOnce(fn: UseEffectHandler) {\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  React.useEffect(fn, []);\n}\n\nexport default useEffectOnce;\n","/* eslint-disable no-console */\n\nconst WARN_LEADING = '[TIX REST QUERY WARNING]';\nconst ERR_LEADING = '[TIX REST QUERY ERROR]';\n\nexport default {\n  warn: (...message: string[]) => {\n    console.warn(WARN_LEADING, ...message);\n  },\n  err: (...message: string[]) => {\n    console.error(ERR_LEADING, ...message);\n  },\n};\n","import { CachedData, StoreHashMap } from '../interfaces';\n\nconst CACHE_PERSISTOR_KEY_PREFIX = 'tix_restQueryPersistedCache';\nconst INITIAL_CACHE_VAL = '{}';\n\nabstract class CachePersistor {\n  static save(cacheKey: string, serializedData: CachedData) {\n    const store = CachePersistor.getStore();\n    store[cacheKey] = serializedData;\n    CachePersistor.setStore(store);\n  }\n\n  static getStore(): StoreHashMap {\n    return JSON.parse(window.localStorage.getItem(CACHE_PERSISTOR_KEY_PREFIX) || INITIAL_CACHE_VAL);\n  }\n\n  static setStore(persistedCacheStore: StoreHashMap) {\n    window.localStorage.setItem(CACHE_PERSISTOR_KEY_PREFIX, JSON.stringify(persistedCacheStore));\n  }\n}\n\nexport default CachePersistor;\n","import * as React from 'react';\n\nimport {\n  useEffectOnce,\n  cacheKeyObfuscator,\n  consoleLogger,\n  fetcher,\n} from '../utils';\nimport rootContext from './rootContext';\n\nconst WARN_INVALID_OPTION_PROPERTY = (property: string) => `Option [${property}] is not part of the API. While this is not an error, ensure the options matches the API.`;\n\ninterface IDataState<T> {\n  isLoading: boolean\n  error?: Error\n  data?: T\n}\nconst initialDataState: IDataState<any> = {\n  isLoading: false,\n  error: null,\n  data: null,\n};\n\ntype CachePolicy = 'cache-first' | 'network-only' | 'cache-only'\n\ninterface ICachePolicies {\n  CACHE_FIRST: CachePolicy\n  NETWORK_ONLY: CachePolicy\n  CACHE_ONLY: CachePolicy\n}\n\nconst CACHE_POLICIES: ICachePolicies = {\n  CACHE_FIRST: 'cache-first',\n  NETWORK_ONLY: 'network-only',\n  CACHE_ONLY: 'cache-only',\n};\n\ntype HookOptionVal = string | boolean | null\n\ninterface IHookOptions {\n  key?: string\n  cachePolicy: CachePolicy\n  shouldPersist?: boolean\n  [optKey: string]: HookOptionVal\n}\n\nconst DEFAULT_OPTS: IHookOptions = {\n  key: null,\n  cachePolicy: CACHE_POLICIES.CACHE_FIRST,\n  shouldPersist: false,\n};\n\ninterface IOptsParam {\n  [optKey: string]: HookOptionVal\n}\n\nconst mergeOptsDefault = (optsParam: IOptsParam) => {\n  const opts = { ...DEFAULT_OPTS };\n\n  Object.keys(optsParam).forEach((property) => {\n    if (Object.prototype.hasOwnProperty.call(DEFAULT_OPTS, property)) {\n      opts[property] = optsParam[property];\n    } else {\n      consoleLogger.warn(WARN_INVALID_OPTION_PROPERTY(property));\n    }\n  });\n\n  return opts;\n};\n\nfunction useCacheable(serviceUrl: string, argOpts = DEFAULT_OPTS) {\n  const options = mergeOptsDefault(argOpts);\n  const ctx = React.useContext(rootContext);\n  const serviceCacheKey = options.key;\n\n  // Determine the cache key based on user-defined key and fallback to encoded service URL\n  // User-defined cache key disregards url into its key, so changing urls will override the data\n  const cacheKey = serviceCacheKey || cacheKeyObfuscator.encode(serviceUrl);\n  const cachedData = ctx.getCachedData(cacheKey);\n\n  // Logic flags based on Cache Policies\n  const isCacheAvailable = Boolean(cachedData);\n  const isCacheAllowed = options.cachePolicy !== CACHE_POLICIES.NETWORK_ONLY;\n  const isNetworkAllowed = [\n    CACHE_POLICIES.CACHE_FIRST,\n    CACHE_POLICIES.NETWORK_ONLY,\n  ].includes(options.cachePolicy);\n  const shouldUseCache = isCacheAvailable && isCacheAllowed;\n\n  // Prepare data for initial hook load\n  const cacheDataForBootstrap = { ...initialDataState, data: cachedData };\n  const bootstrappedData = shouldUseCache ? cacheDataForBootstrap : initialDataState;\n  const [dataState, setDataState] = React.useState(bootstrappedData);\n\n  /**\n   * Perform Fetch Side Effect from Service Url\n   * Will store the data to cache if cache is allowed\n   */\n  const performFetch = React.useCallback(async () => {\n    if (isCacheAvailable || !isNetworkAllowed) {\n      return;\n    }\n\n    // start the fetcher processes\n    setDataState({ ...dataState, isLoading: true });\n    const data = await fetcher.get(serviceUrl);\n    setDataState({ ...dataState, data });\n\n    // set fetched data to cache\n    if (isCacheAllowed) {\n      ctx.setCacheData(cacheKey, data, options);\n    }\n  }, [\n    isCacheAvailable,\n    isNetworkAllowed,\n    dataState,\n    serviceUrl,\n    isCacheAllowed,\n    ctx,\n    cacheKey,\n    options,\n  ]);\n\n  useEffectOnce(() => {\n    performFetch();\n  });\n\n  return dataState;\n}\n\nexport default useCacheable;\n","import * as React from 'react';\nimport {\n  useEffectOnce,\n  consoleLogger,\n  fetcher,\n} from '../utils';\n\nconst WARN_INVALID_OPTION_PROPERTY = (property: string) => `Option [${property}] is not part of the API. While this is not an error, ensure the options matches the API.`;\n\ninterface Fetchable<TResponseData> {\n  isLoading: boolean\n  error?: Error\n  data?: TResponseData\n  refetch?: () => void\n}\n\nconst initialDataState: Fetchable<any> = {\n  isLoading: false,\n  error: null,\n  data: null,\n  refetch: () => {},\n};\n\ntype HookOptionVal = string | boolean | null\ntype HttpMethods = 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE'\n\ninterface IHookOptions {\n  key?: string\n  httpFetchMethod?: HttpMethods\n  httpFetchBody?: any\n  [optKey: string]: HookOptionVal\n}\n\nconst DEFAULT_OPTS: IHookOptions = {\n  key: null,\n  httpFetchMethod: 'GET',\n  httpFetchBody: null,\n};\n\ninterface IOptsParam {\n  [optKey: string]: HookOptionVal\n}\n\nconst mergeOptsDefault = (optsParam: IOptsParam) => {\n  const opts = { ...DEFAULT_OPTS };\n\n  Object.keys(optsParam).forEach((property) => {\n    if (Object.prototype.hasOwnProperty.call(DEFAULT_OPTS, property)) {\n      opts[property] = optsParam[property];\n    } else {\n      consoleLogger.warn(WARN_INVALID_OPTION_PROPERTY(property));\n    }\n  });\n\n  return opts;\n};\n\n/**\n * Hook to Fetch data without any Cache or any other means of data intervention\n * Fetches only once per component mounted, until the refetch method is requested\n * @param serviceUrl URL endpoint to fetch data from\n * @param argOpts Options to modify the behaviour and other configurables\n */\nfunction useFetchable(serviceUrl: string, argOpts = DEFAULT_OPTS) {\n  const options = mergeOptsDefault(argOpts);\n\n  const [dataState, setDataState] = React.useState(initialDataState);\n\n  /**\n   * Perform fetch from service url according to the HTTP methods specified in the options\n   */\n  const performFetch = React.useCallback(async () => {\n    // start the fetcher processes\n    setDataState({ ...dataState, isLoading: true });\n\n    let fetcherResponseData;\n\n    if (options.httpFetchMethod === 'GET') {\n      fetcherResponseData = await fetcher.get(serviceUrl);\n    }\n\n    if (options.httpFetchMethod === 'POST') {\n      fetcherResponseData = await fetcher.post(serviceUrl, options.httpFetchBody);\n    }\n\n    if (options.httpFetchMethod === 'PUT') {\n      fetcherResponseData = await fetcher.put(serviceUrl, options.httpFetchBody);\n    }\n\n    if (options.httpFetchMethod === 'DELETE') {\n      fetcherResponseData = await fetcher.performDelete(serviceUrl);\n    }\n\n    if (options.httpFetchMethod === 'PATCH') {\n      fetcherResponseData = await fetcher.patch(serviceUrl, options.httpFetchBody);\n    }\n\n    // mutate the response data into fetchable data state\n    setDataState({ ...dataState, data: fetcherResponseData });\n  }, [dataState, options.httpFetchBody, options.httpFetchMethod, serviceUrl]);\n\n  useEffectOnce(() => {\n    performFetch();\n\n    // TODO: handle fetch abortion during unmounting to avoid memory leak and wasted API calls\n  });\n\n  return { ...dataState, refetch: performFetch };\n}\n\nexport default useFetchable;\n","import * as React from 'react';\nimport { useEffectOnce, fetcher, consoleLogger } from '../utils';\n\nconst WARN_INVALID_OPTION_PROPERTY = (property: string) => `Option [${property}] is not part of the API. While this is not an error, ensure the options matches the API.`;\n\nconst IDENTITY = (data: any) => data;\nconst EMPTY = () => ({});\nconst NO_OP = () => {};\n\ntype CallbackFunc = (data: any) => any\n\ninterface IStreamableDataState<T> {\n  isStreaming: boolean,\n  isStreamingDone: boolean,\n  error: Error | null,\n  data: T | null,\n}\n\nconst initialDataState: IStreamableDataState<any> = {\n  isStreaming: false,\n  isStreamingDone: false,\n  error: null,\n  data: null,\n};\n\ntype StreamDataFlow = 'stack' | 'object';\ntype HookOptionVal = string | boolean | CallbackFunc | null\n\ninterface IStreamHookOption {\n  streamEndFlag: string,\n  reqBodyParamsKey: string,\n  initialRequestBodyParams: any | null,\n  responseReqBodyExtractorKey: string,\n  stopStreamOnError: boolean,\n  stackDataMapper: any,\n  stackDataReducer: any,\n  onStreamEnd: any,\n  onNextTick: any,\n  onStreamError: any,\n  streamDataFlow: StreamDataFlow\n  [optKey: string]: HookOptionVal\n}\n\nconst DEFAULT_OPTS: IStreamHookOption = {\n  // flag to decide when a stream should be ended. Deep field NOT YET SUPPORTED.\n  streamEndFlag: 'isStreamEnded',\n  // Field that works as a body params for the next request. Deep field NOT YET SUPPORTED.\n  reqBodyParamsKey: 'requestKeys',\n  // Specify the requestBodyParams value that performed during the first time of streaming process\n  initialRequestBodyParams: null,\n  // Field that is going to be passed to the next `reqBodyParamsKey`\n  // from previous streaming response. Deep field NOT YET SUPPORTED.\n  responseReqBodyExtractorKey: 'requestKeys',\n  // if set to true, streaming will stop when api returns error\n  stopStreamOnError: false,\n  stackDataMapper: IDENTITY,\n  stackDataReducer: EMPTY,\n  onStreamEnd: NO_OP,\n  onNextTick: NO_OP,\n  onStreamError: NO_OP,\n  streamDataFlow: 'stack', // stack | object, STACK will place all responses into a single array. OBJECT will replace.\n};\n\ninterface IOptsParam {\n  [optKey: string]: HookOptionVal\n}\n\nconst mergeOptsDefault = (optsParam: IOptsParam) => {\n  const opts = { ...DEFAULT_OPTS };\n\n  Object.keys(optsParam).forEach((property) => {\n    if (Object.prototype.hasOwnProperty.call(DEFAULT_OPTS, property)) {\n      opts[property] = optsParam[property];\n    } else {\n      consoleLogger.warn(WARN_INVALID_OPTION_PROPERTY(property));\n    }\n  });\n\n  return opts;\n};\n\n/**\n * Fetches streaming data and returns the of streaming\n * response, depending on the stream data flow shape\n * Current implementation uses POST request\n * @param {string} serviceUrl\n * @param {*} argOpts\n */\nfunction useStreamable(serviceUrl: string, argOpts = DEFAULT_OPTS) {\n  const options = mergeOptsDefault(argOpts);\n  const [dataState, setDataState] = React.useState(initialDataState);\n\n  // Run PerformFetch function recursively while mutating the streamQueue\n  // streamQueue might be spammed with lots of responses, but after streaming done performed,\n  // the value will automatically be garbage collected.\n  const performFetch = React.useCallback(async (requestBodyParams = {}, streamQueue = []) => {\n    try {\n      const streamDataResponse = await fetcher.post(serviceUrl, requestBodyParams);\n\n      options.onNextTick();\n\n      if (streamDataResponse[options.streamEndFlag] === false) {\n        // perform next fetch with updated stream bodyParamsKey as request body\n        performFetch(\n          { [options.reqBodyParamsKey]: streamDataResponse[options.responseReqBodyExtractorKey] },\n          [...streamQueue, { ...streamDataResponse }],\n        );\n\n        return;\n      }\n\n      if (streamDataResponse[options.streamEndFlag] === true) {\n        options.onStreamEnd();\n\n        if (options.streamDataFlow === 'stack') {\n          setDataState({\n            ...dataState,\n            data: [...streamQueue, { ...streamDataResponse }].map(options.stackDataMapper),\n          });\n\n          return;\n        }\n\n        if (options.streamDataFlow === 'object') {\n          setDataState({\n            ...dataState,\n            data: [...streamQueue, { ...streamDataResponse }]\n              .map(options.stackDataMapper)\n              .reduce(options.stackDataReducer),\n          });\n\n          return;\n        }\n      }\n\n      consoleLogger.warn('Stream ended due to stream ending flag is not found or not a proper boolean value');\n      return;\n    } catch (e) {\n      consoleLogger.err('something went wrong ', e);\n    }\n  }, [serviceUrl, options, dataState]);\n\n  useEffectOnce(() => {\n    performFetch({ [options.reqBodyParamsKey]: options.initialRequestBodyParams });\n  });\n\n  return dataState;\n}\n\nexport default useStreamable;\n","import * as React from 'react';\n\nimport libContext from './rootContext';\nimport { CachedData, StoreHashMap } from '../interfaces';\nimport { consoleLogger, CachePersistor } from '../utils';\n\ninterface RestQueryProps {\n  children: React.ReactElement\n}\n\nfunction RestQueryProvider({ children }: RestQueryProps) {\n  const persistedCacheStore = CachePersistor.getStore();\n  const [cacheStore, setCacheStore] = React.useState<StoreHashMap>(persistedCacheStore);\n\n  /**\n   * Sets provided data to cache depending on the caching storage strategy\n   * @param cacheKey unique key as a reference to the store's hash table\n   * @param data data to cache\n   * @param opts hook options\n   */\n  function setCacheData(cacheKey: string, data: any, opts: any) {\n    // serialize data into JSON string to let the data be stored in browser storage or cookies\n    const serializedData = JSON.stringify(data);\n\n    const cachedData: CachedData = {\n      data: serializedData,\n      // TODO: implement cache expiration logic\n      cacheStoredAt: null,\n      cacheExpiredAt: null,\n    };\n\n    // Persist the serialized data into the cache persistor storage engine\n    if (opts.shouldPersist) {\n      CachePersistor.save(cacheKey, cachedData);\n    }\n\n    setCacheStore({\n      ...cacheStore,\n      [cacheKey]: cachedData,\n    });\n  }\n\n  /**\n   * Returns data stored in the Query Cache\n   * @param cacheKey unique key as a reference to the store's hash table\n   */\n  function getCachedData(cacheKey: string): any {\n    // returns null when requested cache key is not available in the store hash table\n    if (!cacheStore[cacheKey]) {\n      return null;\n    }\n\n    // TODO: implement cache expiration logic before retrieving the data\n\n    try {\n      // deserialized the cached data\n      const deserializedData = JSON.parse(cacheStore[cacheKey]?.data);\n\n      return deserializedData;\n    } catch (e) {\n      // returns null when data failed to be deserialized due to unknown reasons\n      consoleLogger.err('something went wrong when deserializing data ', e);\n\n      return null;\n    }\n  }\n\n  const ctxValue = {\n    store: cacheStore,\n    getCachedData,\n    setCacheData,\n  };\n\n  return (\n    <libContext.Provider value={ctxValue}>\n      {children}\n    </libContext.Provider>\n  );\n}\n\nexport default RestQueryProvider;\n","const obsfuscator = {\n  encode: (str: string) => btoa(str),\n};\n\nexport default obsfuscator;\n"],"names":["React","store","fetcher","url","window","fetch","response","json","bodyParams","method","body","JSON","stringify","useEffectOnce","fn","WARN_LEADING","ERR_LEADING","console","warn","error","CachePersistor","save","cacheKey","serializedData","getStore","setStore","parse","localStorage","getItem","persistedCacheStore","setItem","initialDataState","isLoading","data","CACHE_POLICIES","CACHE_FIRST","NETWORK_ONLY","CACHE_ONLY","DEFAULT_OPTS","key","cachePolicy","shouldPersist","refetch","httpFetchMethod","httpFetchBody","NO_OP","isStreaming","isStreamingDone","streamEndFlag","reqBodyParamsKey","initialRequestBodyParams","responseReqBodyExtractorKey","stopStreamOnError","stackDataMapper","stackDataReducer","onStreamEnd","onNextTick","onStreamError","streamDataFlow","children","cacheStore","setCacheStore","libContext","Provider","value","getCachedData","_cacheStore$cacheKey","e","consoleLogger","setCacheData","opts","cachedData","cacheStoredAt","cacheExpiredAt","serviceUrl","argOpts","optsParam","options","Object","keys","forEach","property","prototype","hasOwnProperty","call","WARN_INVALID_OPTION_PROPERTY","ctx","rootContext","btoa","isCacheAvailable","Boolean","isCacheAllowed","isNetworkAllowed","includes","shouldUseCache","cacheDataForBootstrap","dataState","setDataState","performFetch","fetcherResponseData","requestBodyParams","streamQueue","streamDataResponse","map","reduce"],"mappings":"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"}